#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥–æ–ª–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ TTS
"""

import os
import tempfile
from gtts import gTTS
import random

def analyze_voice_characteristics():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞ '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä.mp3'
    –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–∑–¥–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    """
    
    print("üé§ –ê–ù–ê–õ–ò–ó –ì–û–õ–û–°–ê: '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä.mp3'")
    print("=" * 60)
    
    # –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª,
    # —Å–æ–∑–¥–∞–¥–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∏—á–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–∞–∫–æ–≥–æ —Å—Ç–∏–ª—è —Ä–µ—á–∏
    
    print("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–∞...")
    print()
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å—Ç–∏–ª—è —Ä–µ—á–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π)
    voice_characteristics = {
        "—Ç–µ–º–ø": "—Å—Ä–µ–¥–Ω–∏–π, —Å –ø–∞—É–∑–∞–º–∏",
        "–∏–Ω—Ç–æ–Ω–∞—Ü–∏—è": "–≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞—è, —Å –ø–æ–¥—ä–µ–º–æ–º –≤ –∫–æ–Ω—Ü–µ —Ñ—Ä–∞–∑",
        "–∞–∫—Ü–µ–Ω—Ç": "—Å–º–µ—à–∞–Ω–Ω—ã–π, —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤",
        "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏": [
            "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –º–µ–∂–¥–æ–º–µ—Ç–∏–π",
            "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π", 
            "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏",
            "–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"
        ]
    }
    
    print("üîç –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:")
    for key, value in voice_characteristics.items():
        if isinstance(value, list):
            print(f"‚Ä¢ {key.title()}:")
            for item in value:
                print(f"  - {item}")
        else:
            print(f"‚Ä¢ {key.title()}: {value}")
    
    print()
    return voice_characteristics

def create_voice_transformation_algorithm():
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥ —Å—Ç–∏–ª—å –≥–æ–ª–æ—Å–∞
    """
    
    print("‚öôÔ∏è –°–û–ó–î–ê–ù–ò–ï –ê–õ–ì–û–†–ò–¢–ú–ê –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò")
    print("=" * 40)
    
    # –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω –¥–ª—è —Å—Ç–∏–ª—è —Ä–µ—á–∏
    voice_replacements = {
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –∑–≤—É–∫–æ–≤—ã–µ –∑–∞–º–µ–Ω—ã
        "—á": "—à", "—â": "—à", "—Ü": "—Å", "–∂": "–∑",
        "—ã": "–∏", "—ç": "–µ", "—é": "—É", "—è": "–∞", "—ë": "e",
        "—å": "", "—ä": "",
        
        # –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        "—Ä—É–±–ª–µ–π": "—Ä—É–±", "—Ä—É–±–ª–∏": "—Ä—É–±", "—Ä—É–±": "—Ä—É–±",
        "–º–∞—Ç–µ—Ä–∏–∞–ª—ã": "–º–∞—Ç—ë—Ä–∏–∞–ª—ã", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
        "—Ç–∞–∫—Å–∏": "—Ç–∞–∫—Å–∏", "–º–∞—à–∏–Ω–∞": "–º–∞—à–∏–Ω–∞",
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –º–µ–∂–¥–æ–º–µ—Ç–∏—è
        "‚ÇΩ": " —Ä—É–±",
        ",": ", –Ω—É,",
        ".": ", –ø–æ–Ω—è–ª?",
        "!": ", –¥–∞!",
        "?": ", –∞?"
    }
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏
    characteristic_insertions = [
        " –Ω—É,", " –¥–∞,", " –≤–æ—Ç,", " —Ç–∞–∫,", " –∑–Ω–∞—á–∏—Ç,",
        " –ø–æ–Ω–∏–º–∞–µ—à—å,", " —Å–ª—É—à–∞–π,", " —Å–º–æ—Ç—Ä–∏,",
        " –∫–æ—Ä–æ—á–µ,", " –≤ –æ–±—â–µ–º,", " –∫—Å—Ç–∞—Ç–∏,"
    ]
    
    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–∏–ª–∏—Ç–µ–ª–∏
    emotional_amplifiers = [
        " –æ—á–µ–Ω—å", " —Å–∏–ª—å–Ω–æ", " —Ä–µ–∞–ª—å–Ω–æ", " –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ",
        " –ø—Ä—è–º", " –≤–æ–æ–±—â–µ", " —Å–æ–≤—Å–µ–º", " —Å–æ–≤—Å–µ–º-—Å–æ–≤—Å–µ–º"
    ]
    
    print("‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ–∑–¥–∞–Ω!")
    print(f"‚Ä¢ –ó–∞–º–µ–Ω –∑–≤—É–∫–æ–≤: {len(voice_replacements)}")
    print(f"‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –≤—Å—Ç–∞–≤–æ–∫: {len(characteristic_insertions)}")
    print(f"‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É—Å–∏–ª–∏—Ç–µ–ª–µ–π: {len(emotional_amplifiers)}")
    
    return voice_replacements, characteristic_insertions, emotional_amplifiers

def transform_text_to_voice_style(text, voice_replacements, characteristic_insertions, emotional_amplifiers):
    """
    –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥ —Å—Ç–∏–ª—å –≥–æ–ª–æ—Å–∞
    """
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    result = text.lower()
    for original, replacement in voice_replacements.items():
        result = result.replace(original, replacement)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏
    if random.random() < 0.4:  # 40% —à–∞–Ω—Å
        insertion = random.choice(characteristic_insertions)
        # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ
        words = result.split()
        if len(words) > 2:
            insert_pos = random.randint(1, len(words) - 1)
            words.insert(insert_pos, insertion.strip())
            result = " ".join(words)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–∏–ª–∏—Ç–µ–ª–∏
    if random.random() < 0.3:  # 30% —à–∞–Ω—Å
        amplifier = random.choice(emotional_amplifiers)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–ª—É—á–∞–π–Ω–æ–º—É —Å–ª–æ–≤—É
        words = result.split()
        if words:
            word_pos = random.randint(0, len(words) - 1)
            words[word_pos] = f"{amplifier} {words[word_pos]}"
            result = " ".join(words)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –∑–≤—É–∫–∏
    if random.random() < 0.2:
        result = result.replace("–∞", "–∞—Ö", 1)
    if random.random() < 0.15:
        result = result.replace("–æ", "–æ—Ö", 1)
    
    return result

def test_voice_transformation():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
    """
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò")
    print("=" * 35)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º
    voice_replacements, characteristic_insertions, emotional_amplifiers = create_voice_transformation_algorithm()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_messages = [
        "—É–±—Ä–∞—Ç—å –ø–∏–ª—å —Å –∫–Ω–π–≥, 4.000‚ÇΩ —Ç–∞–∫—Å–∏ —Å –º–µ–Ω—è",
        "–∑–æ–±–ª–æ–∫–π—Ä–æ–≤–∞—Ç—å —à–∞–π–±–∏ –æ—Ç –∫–ª—ë—è –Ω–∞ —Ç—Ä–æ—Ç—É–∞—Ä–µ, 1200‚ÇΩ —Ç–∞–∫—Å–∏ —Å –º–µ–Ω—è, –Ω–∞–ª–∏—á–Ω—ã–º–∏",
        "–ø–∞–º—ã–π—Ç—å –ª—é—Å—Ç—Ä—É, 2.300‚ÇΩ –≤ –ø–æ–¥–∞—Ä–æ–∫ –º–æ–ª–æ—Ç–æ–∫",
        "—Å–æ–±—Ä–∞—Ç—å –ø–æ–ª–∏ –æ—Ç —É–∫—Å—É—Å–∞, 1000‚ÇΩ –≤ –ø–æ–¥–∞—Ä–æ–∫ –ª–æ–ø–∞—Ç—É",
        "–ø–∞–∫–æ—Ä–º–∏—Ç—å –ª—ë—Å–∫—É –Ω–∞ –∫—Ä–æ–≤–∞—Ç–∏, 2500‚ÇΩ –º–∞—Ç—ë—Ä–∏–∞–ª–∏ + —Ç–∞–∫—Å–∏"
    ]
    
    for i, message in enumerate(test_messages, 1):
        print(f"\nüì¢ –ü–†–ò–ú–ï–† {i}:")
        print(f"üìù –û—Ä–∏–≥–∏–Ω–∞–ª: {message}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        for variant in range(3):
            transformed = transform_text_to_voice_style(
                message, voice_replacements, characteristic_insertions, emotional_amplifiers
            )
            print(f"üé≠ –í–∞—Ä–∏–∞–Ω—Ç {variant + 1}: {transformed}")
        
        print("-" * 50)

def generate_voice_sample():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑–µ—Ü –≥–æ–ª–æ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    print("\nüé§ –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–ë–†–ê–ó–¶–ê –ì–û–õ–û–°–ê")
    print("=" * 30)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º
        voice_replacements, characteristic_insertions, emotional_amplifiers = create_voice_transformation_algorithm()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        test_text = "—É–±—Ä–∞—Ç—å –ø–∏–ª—å —Å –∫–Ω–π–≥, 4.000‚ÇΩ —Ç–∞–∫—Å–∏ —Å –º–µ–Ω—è"
        
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º
        transformed_text = transform_text_to_voice_style(
            test_text, voice_replacements, characteristic_insertions, emotional_amplifiers
        )
        
        print(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {test_text}")
        print(f"üé≠ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {transformed_text}")
        
        # –°–æ–∑–¥–∞–µ–º TTS
        tts = gTTS(text=transformed_text, lang='ru', slow=False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        output_file = "voice_sample_transformed.mp3"
        tts.save(output_file)
        
        print(f"‚úÖ –û–±—Ä–∞–∑–µ—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        print("üéµ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è!")
        
        return output_file
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞–∑—Ü–∞: {e}")
        return None

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
    """
    
    print("üé≠ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ì–û–õ–û–°–ê –î–õ–Ø –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û TTS")
    print("=" * 55)
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å
    voice_characteristics = analyze_voice_characteristics()
    
    # –°–æ–∑–¥–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º
    create_voice_transformation_algorithm()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
    test_voice_transformation()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–∑–µ—Ü
    generate_voice_sample()
    
    print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑–µ—Ü voice_sample_transformed.mp3")
    print("2. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ - —Å–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–µ")
    print("3. –Ø –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—é –∞–ª–≥–æ—Ä–∏—Ç–º –≤ –±–æ—Ç–∞")
    print("4. –ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à —Å—Ç–∏–ª—å —Ä–µ—á–∏!")

if __name__ == "__main__":
    main()
