import asyncio
import logging
import random
import os
from datetime import datetime, timedelta
from telegram import Bot
from telegram.error import TelegramError
import schedule
import time
from threading import Thread

# Настройка логирования
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Конфигурация бота
BOT_TOKEN = os.getenv("BOT_TOKEN", "8437007902:AAFXbYzoWZI7lmg4EvF3DcopKXwbzYQgpkI")
CHANNEL_ID = os.getenv("CHANNEL_ID", "-1002722697999")  # Ваш канал

class WorkBot:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        
        # Базовые элементы для генерации работ (бесконечная генерация)
        self.work_verbs = [
            "Покрасить", "Помыть", "Убрать", "Покосить", "Посидеть", 
            "Разобрать", "Покормить", "Почистить", "Поклеить", "Повесить",
            "Собрать", "Разложить", "Переставить", "Отремонтировать", "Починить",
            "Настроить", "Проверить", "Просушить", "Прогреть", "Охладить",
            "Загрузить", "Выгрузить", "Перевезти", "Доставить", "Забрать",
            "Принести", "Отнести", "Поднять", "Опустить", "Повернуть",
            "Сдвинуть", "Передвинуть", "Установить", "Снять", "Закрепить",
            "Открепить", "Соединить", "Разъединить", "Включить", "Выключить",
            "Открыть", "Закрыть", "Заблокировать", "Разблокировать", "Защитить"
        ]
        
        self.work_objects = [
            "забор", "дом", "машину", "окна", "полы", "стены", "двери", 
            "крышу", "подвал", "чердак", "балкон", "лестницу", "ворота",
            "калитку", "заборчик", "лавочку", "скамейку", "почтовый ящик",
            "люстру", "зеркала", "мебель", "технику", "инструменты", "одежду",
            "обувь", "посуду", "ковры", "шторы", "жалюзи", "радиаторы",
            "трубы", "краны", "розетки", "выключатели", "лампочки", "провода",
            "кабели", "антенну", "спутниковую тарелку", "кондиционер", "вентилятор",
            "печь", "камин", "духовку", "микроволновку", "холодильник", "стиральную машину",
            "посудомойку", "пылесос", "утюг", "фен", "бритву", "электробритву",
            "телефон", "компьютер", "принтер", "сканер", "роутер", "модем",
            "телевизор", "музыкальный центр", "колонки", "наушники", "камеру",
            "фотоаппарат", "видеокамеру", "проектор", "экран", "доску", "плакаты",
            "картины", "фотографии", "рамки", "вазы", "статуэтки", "сувениры",
            "книги", "журналы", "газеты", "документы", "папки", "файлы",
            "диски", "флешки", "карты памяти", "батарейки", "зарядные устройства",
            "кабели зарядки", "адаптеры", "переходники", "разветвители", "удлинители",
            "фильтры", "картриджи", "тонер", "бумагу", "ручки", "карандаши",
            "маркеры", "фломастеры", "краски", "кисти", "валики", "шпатели",
            "отвертки", "ключи", "молотки", "гвозди", "шурупы", "болты", "гайки",
            "шайбы", "прокладки", "герметик", "клей", "скотч", "изоленту",
            "проволоку", "веревку", "шнур", "цепь", "трос", "канат", "леску",
            "сеть", "ткань", "пленку", "фольгу", "бумагу", "картон", "пенопласт",
            "поролон", "вата", "вата", "синтепон", "пух", "перья", "шерсть",
            "мех", "кожу", "замшу", "велюр", "бархат", "атлас", "шелк",
            "хлопок", "лен", "шерсть", "кашемир", "ангора", "мохер", "альпака",
            "верблюжья шерсть", "як", "лама", "викунья", "гуанако", "сурок",
            "бобр", "норка", "соболь", "куница", "горностай", "ласка", "хорек",
            "енот", "лиса", "волк", "медведь", "тигр", "леопард", "ягуар",
            "пума", "рысь", "каракал", "сервал", "оцелот", "маргай", "онцилла",
            "кот", "кошка", "котенок", "котенок", "котенок", "котенок", "котенок"
        ]
        
        self.work_locations = [
            "в доме", "в квартире", "в офисе", "в магазине", "в кафе", "в ресторане",
            "в школе", "в больнице", "в поликлинике", "в аптеке", "в банке", "в почте",
            "в библиотеке", "в музее", "в театре", "в кинотеатре", "в спортзале",
            "в бассейне", "в сауне", "в бане", "в гараже", "в подвале", "на чердаке",
            "на балконе", "на лоджии", "на террасе", "на веранде", "в саду", "в огороде",
            "в парке", "во дворе", "на улице", "на дороге", "на тротуаре", "на площади",
            "на стадионе", "на арене", "на сцене", "на подиуме", "на трибуне", "на скамейке",
            "на лавочке", "на стуле", "на кресле", "на диване", "на кровати", "на матрасе",
            "на подушке", "на одеяле", "на простыне", "на наволочке", "на пододеяльнике",
            "на покрывале", "на плед", "на ковре", "на паласе", "на линолеуме", "на паркете",
            "на ламинате", "на плитке", "на мраморе", "на граните", "на бетоне", "на асфальте",
            "на земле", "на траве", "на песке", "на камнях", "на гальке", "на щебне",
            "на гравии", "на глине", "на иле", "на грязи", "на снегу", "на льду",
            "на воде", "на реке", "на озере", "на море", "на океане", "на пруду",
            "на болоте", "на лугу", "на поле", "на горе", "на холме", "на склоне",
            "на вершине", "на дне", "на дне", "на дне", "на дне", "на дне"
        ]
        
        self.work_conditions = [
            "от грязи", "от пыли", "от мусора", "от листьев", "от снега", "от льда",
            "от ржавчины", "от накипи", "от жира", "от копоти", "от сажи", "от клея",
            "от краски", "от лака", "от воска", "от масла", "от бензина", "от солярки",
            "от керосина", "от ацетона", "от спирта", "от уксуса", "от соли", "от сахара",
            "от меда", "от варенья", "от джема", "от сиропа", "от соуса", "от кетчупа",
            "от майонеза", "от горчицы", "от хрена", "от перца", "от специй", "от трав",
            "от цветов", "от фруктов", "от овощей", "от ягод", "от грибов", "от орехов",
            "от семечек", "от зерен", "от крупы", "от муки", "от сахара", "от соли",
            "от соды", "от дрожжей", "от закваски", "от кефира", "от йогурта", "от творога",
            "от сыра", "от масла", "от маргарина", "от сала", "от мяса", "от рыбы",
            "от птицы", "от яиц", "от молока", "от сливок", "от сметаны", "от майонеза",
            "от кетчупа", "от соуса", "от подливы", "от бульона", "от супа", "от борща",
            "от щей", "от рассольника", "от солянки", "от ухи", "от харчо", "от лагмана",
            "от плова", "от шашлыка", "от шаурмы", "от бургера", "от пиццы", "от пасты",
            "от риса", "от гречки", "от перловки", "от пшена", "от овсянки", "от манки",
            "от кукурузы", "от гороха", "от фасоли", "от чечевицы", "от нута", "от маша",
            "от сои", "от арахиса", "от миндаля", "от грецких орехов", "от фундука", "от кешью",
            "от фисташек", "от кедровых орехов", "от бразильских орехов", "от макадамии", "от пекана", "от орехов пекан"
        ]
        
        self.prices = [
            "1000₽", "1200₽", "1500₽", "1800₽", "2000₽", 
            "2300₽", "2500₽", "2800₽", "3000₽", "3500₽",
            "4000₽", "4300₽", "4500₽", "5000₽",
            "1.000₽", "1.200₽", "1.500₽", "1.800₽", "2.000₽",
            "2.300₽", "2.500₽", "2.800₽", "3.000₽", "3.500₽",
            "4.000₽", "4.300₽", "4.500₽", "5.000₽"
        ]
        
        self.bonuses = [
            "такси с меня",
            "такси с меня", 
            "такси с меня",
            "такси с меня",
            "такси с меня",
            "такси с меня",
            "такси с меня",
            "такси с меня",
            "обед", 
            "обед борщ", 
            "в подарок бу клей",
            "инвентарь даю",
            "материалы даю",
            "чай с печеньками",
            "кофе с булочкой",
            "обед + чай",
            "материалы + обед",
            "такси + обед",
            "инвентарь + обед",
            "в подарок инструмент",
            "обед + десерт",
            "материалы + такси",
            "чай + печеньки",
            "в подарок набор дюбелей",
            "в подарок перфоратор",
            "в подарок болгарка",
            "в подарок дрель",
            "в подарок набор ключей",
            "в подарок молоток",
            "в подарок отвертки",
            "в подарок плоскогубцы",
            "в подарок ножовку",
            "в подарок лопату",
            "в подарок грабли",
            "в подарок ведро",
            "в подарок тряпки",
            "в подарок швабру"
        ]
        
        # Дополнительные элементы в стиле примеров
        self.extra_info = [
            "за пару часов",
            "на руки",
            "Косилка есть",
            "Места ограничены",
            "так же стоит швецкий стол",
            "инструменты дам",
            "материалы есть",
            "быстро сделать",
            "срочно нужно",
            "инвентарь свой",
            "все даю",
            "быстро и качественно",
            "опыт не важен",
            "главное желание",
            "за день сделаем",
            "инструменты предоставлю",
            "все необходимое есть",
            "работа легкая",
            "деньги сразу",
            "наличными"
        ]
        
        # Дополнительные элементы (как от работяги)
        self.quirky_additions = [
            "P.S. Забор красить аккуратно",
            "P.S. Бабушка ворчит но не злая",
            "P.S. Крыльцо отмыть до блеска",
            "P.S. Дом помыть хорошо",
            "P.S. Снег убирать осторожно",
            "P.S. Машину помыть до блеска",
            "P.S. Траву косить ровно",
            "P.S. Стены красить аккуратно",
            "P.S. Мусор убирать весь",
            "P.S. Окна помыть чисто",
            "P.S. Ворота покрасить хорошо",
            "P.S. Листья убрать все",
            "P.S. Полы помыть до блеска",
            "P.S. Заборчик покрасить ровно",
            "P.S. Снег убирать аккуратно",
            "P.S. Посуду помыть чисто",
            "P.S. Лавочку покрасить хорошо",
            "P.S. Мусор убрать весь",
            "P.S. Двери помыть до блеска",
            "P.S. Калитку покрасить ровно"
        ]

    def generate_work_type(self):
        """Генерирует новый тип работы (бесконечная генерация)"""
        # 30% шанс использовать специальные работы
        if random.random() < 0.3:
            special_works = [
                "Набираем массовку для съемок",
                "Зачистить участок от бурьяна", 
                "Разобрать ступеньки на крыльце",
                "Посидеть с бабушкой",
                "Покормить кота",
                "Помыть велосипед",
                "Убрать паутину с потолка",
                "Покрасить почтовый ящик",
                "Убрать пыль с книг",
                "Помыть люстру",
                "Покрасить лестницу",
                "Убрать мусор из сарая",
                "Помыть пол в гараже",
                "Покрасить трубы",
                "Убрать снег с крыши гаража",
                "Помыть забор",
                "Покрасить дверь в подъезд"
            ]
            return random.choice(special_works)
        
        # 70% шанс сгенерировать новую работу
        verb = random.choice(self.work_verbs)
        obj = random.choice(self.work_objects)
        
        # 40% шанс добавить условие
        if random.random() < 0.4:
            condition = random.choice(self.work_conditions)
            work = f"{verb} {obj} {condition}"
        else:
            work = f"{verb} {obj}"
        
        # 30% шанс добавить локацию
        if random.random() < 0.3:
            location = random.choice(self.work_locations)
            work += f" {location}"
        
        return work

    def generate_message(self):
        """Генерирует сообщение в стиле примеров (бесконечная генерация)"""
        work = self.generate_work_type()
        price = random.choice(self.prices)
        bonus = random.choice(self.bonuses)
        
        # Формируем сообщение в стиле примеров
        message = f"{work}, {price} {bonus}"
        
        # 40% шанс добавить дополнительную информацию
        if random.random() < 0.4:
            extra = random.choice(self.extra_info)
            message += f", {extra}"
        
        # Добавляем безграмотность в основной текст
        message = self.add_typos(message)
        
        return message
    
    def add_typos(self, text):
        """Добавляет МАКСИМАЛЬНУЮ безграмотность как у очень неграмотного человека"""
        # Словарь замен для МАКСИМАЛЬНОЙ безграмотности
        replacements = {
            "Покрасить": "Пакрасить",
            "Помыть": "Памыйть", 
            "Убрать": "Убрать",
            "Покосить": "Пакосить",
            "Посидеть": "Пасидеть",
            "Разобрать": "Разобрать",
            "Покормить": "Пакормить",
            "такси": "такси",
            "обед": "обед",
            "инвентарь": "инвентарь",
            "материалы": "матёриалы",
            "инструмент": "инструмент",
            "дюбелей": "дюбелёй",
            "перфоратор": "перфаратор",
            "болгарка": "болгарка",
            "дрель": "дрель",
            "ключей": "ключёй",
            "молоток": "молоток",
            "отвертки": "отвёртки",
            "плоскогубцы": "плоскогубцы",
            "ножовку": "ножовку",
            "лопату": "лопату",
            "грабли": "грабли",
            "ведро": "ведро",
            "тряпки": "тряпки",
            "швабру": "швабру",
            "забор": "забор",
            "бабушкой": "бабушкой",
            "крыльцо": "крыльцо",
            "мусора": "мусора",
            "дом": "дом",
            "грязи": "грязи",
            "снег": "снёг",
            "крыши": "крышй",
            "машину": "машину",
            "траву": "траву",
            "стены": "стены",
            "участке": "участке",
            "окна": "окна",
            "ворота": "ворота",
            "листья": "листья",
            "полы": "полы",
            "заборчик": "заборчик",
            "дорожек": "дорожек",
            "посуду": "посуду",
            "лавочку": "лавочку",
            "подвале": "подвале",
            "двери": "двери",
            "калитку": "калитку",
            "кота": "кота",
            "велосипед": "веласипед",
            "скамейку": "скамейку",
            "паутину": "паутину",
            "потолка": "потолка",
            "зеркала": "зеркала",
            "почтовый": "почтовый",
            "ящик": "ящик",
            "пыль": "пыль",
            "книг": "книг",
            "люстру": "люстру",
            "лестницу": "лестницу",
            "сарая": "сарая",
            "гараже": "гараже",
            "трубы": "труби",
            "подъезд": "подъезд"
        }
        
        # Применяем замены с вероятностью 70% (МАКСИМАЛЬНАЯ безграмотность)
        for correct, wrong in replacements.items():
            if random.random() < 0.7:
                text = text.replace(correct, wrong)
        
        # Добавляем МАКСИМАЛЬНО случайные опечатки
        if random.random() < 0.6:
            text = text.replace("и", "й", 1)
        if random.random() < 0.5:
            text = text.replace("е", "ё", 1)
        if random.random() < 0.4:
            text = text.replace("о", "а", 1)
        if random.random() < 0.35:
            text = text.replace("ы", "и", 1)
        if random.random() < 0.3:
            text = text.replace("у", "ю", 1)
        if random.random() < 0.25:
            text = text.replace("а", "о", 1)
        if random.random() < 0.2:
            text = text.replace("ё", "е", 1)
        if random.random() < 0.15:
            text = text.replace("й", "и", 1)
            
        return text

    async def send_message_to_channel(self):
        """Отправляет сообщение в канал"""
        try:
            message = self.generate_message()
            await self.bot.send_message(chat_id=CHANNEL_ID, text=message)
            logger.info(f"Сообщение отправлено: {message}")
        except TelegramError as e:
            logger.error(f"Ошибка при отправке сообщения: {e}")

    def send_message_sync(self):
        """Синхронная обертка для отправки сообщения"""
        asyncio.run(self.send_message_to_channel())

    def schedule_messages(self):
        """Планирует отправку сообщений 8 раз в день"""
        # 8:00 утра
        schedule.every().day.at("08:00").do(self.send_message_sync)
        # 10:00 утра
        schedule.every().day.at("10:00").do(self.send_message_sync)
        # 12:00 дня
        schedule.every().day.at("12:00").do(self.send_message_sync)
        # 14:00 дня  
        schedule.every().day.at("14:00").do(self.send_message_sync)
        # 16:00 дня
        schedule.every().day.at("16:00").do(self.send_message_sync)
        # 18:00 вечера
        schedule.every().day.at("18:00").do(self.send_message_sync)
        # 20:00 вечера
        schedule.every().day.at("20:00").do(self.send_message_sync)
        # 22:00 вечера
        schedule.every().day.at("22:00").do(self.send_message_sync)
        
        logger.info("Расписание сообщений настроено: 08:00, 10:00, 12:00, 14:00, 16:00, 18:00, 20:00, 22:00")

    def run_scheduler(self):
        """Запускает планировщик в отдельном потоке"""
        while True:
            schedule.run_pending()
            time.sleep(60)  # Проверяем каждую минуту

    async def start_bot(self):
        """Запускает бота"""
        try:
            # Проверяем подключение
            me = await self.bot.get_me()
            logger.info(f"Бот запущен: @{me.username}")
            
            # Настраиваем расписание
            self.schedule_messages()
            
            # Запускаем планировщик в отдельном потоке
            scheduler_thread = Thread(target=self.run_scheduler, daemon=True)
            scheduler_thread.start()
            
            logger.info("Бот готов к работе! Сообщения будут отправляться в 08:00, 10:00, 12:00, 14:00, 16:00, 18:00, 20:00, 22:00")
            
            # Отправляем тестовое сообщение
            await self.send_message_to_channel()
            logger.info("Тестовое сообщение отправлено")
            
            # Держим бота активным
            while True:
                await asyncio.sleep(3600)  # Спим час
                
        except Exception as e:
            logger.error(f"Ошибка при запуске бота: {e}")

def main():
    """Главная функция"""
    bot = WorkBot()
    
    try:
        asyncio.run(bot.start_bot())
    except KeyboardInterrupt:
        logger.info("Бот остановлен пользователем")
    except Exception as e:
        logger.error(f"Критическая ошибка: {e}")

if __name__ == "__main__":
    main()
